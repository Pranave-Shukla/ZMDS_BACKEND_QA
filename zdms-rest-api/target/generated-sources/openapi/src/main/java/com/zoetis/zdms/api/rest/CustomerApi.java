/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zoetis.zdms.api.rest;

import com.zoetis.zdms.api.dto.CustomerDetailsResponseDto;
import com.zoetis.zdms.api.dto.CustomerPartialRequestDto;
import com.zoetis.zdms.api.dto.CustomersRequestDto;
import com.zoetis.zdms.api.dto.CustomersResponseDto;
import com.zoetis.zdms.api.dto.ErrorDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T09:15:08.643330200-04:00[America/New_York]")
@Validated
@Api(value = "Customer", description = "the Customer API")
public interface CustomerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/customers/{id} : Customer details
     *
     * @param id Customer ID (required)
     * @return Customer details (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Customer details", nickname = "getCustomerDetails", notes = "", response = CustomerDetailsResponseDto.class, tags={ "customer", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Customer details", response = CustomerDetailsResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CustomerDetailsResponseDto> getCustomerDetails(@ApiParam(value = "Customer ID", required = true) @PathVariable("id") String id

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customer\" : { \"lastName\" : \"lastName\", \"city\" : \"city\", \"sourceSystem\" : { \"name\" : \"name\" }, \"companyName\" : \"companyName\", \"postalCode\" : \"postalCode\", \"title\" : \"title\", \"nativeCreatedDate\" : \"2000-01-23T04:56:07.000+00:00\", \"firstName\" : \"firstName\", \"streetAddress\" : \"streetAddress\", \"countryCode\" : \"countryCode\", \"freeText\" : \"freeText\", \"erpId\" : \"erpId\", \"id\" : \"id\", \"nativeId\" : \"nativeId\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/customers : Customers list
     *
     * @param customersRequestDto Get customers request parameters (required)
     * @return A paged list of customers (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Customers list", nickname = "getCustomers", notes = "", response = CustomersResponseDto.class, tags={ "customer", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "A paged list of customers", response = CustomersResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CustomersResponseDto> getCustomers(

@ApiParam(value = "Get customers request parameters", required = true )   @Valid @RequestBody CustomersRequestDto customersRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pageInfo\" : { \"pageNumber\" : 0, \"totalPages\" : 1, \"totalElements\" : 6 }, \"customers\" : [ { \"address\" : \"address\", \"sourceSystem\" : { \"name\" : \"name\" }, \"companyName\" : \"companyName\", \"erpId\" : \"erpId\", \"id\" : \"id\", \"nativeCreatedDate\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"address\" : \"address\", \"sourceSystem\" : { \"name\" : \"name\" }, \"companyName\" : \"companyName\", \"erpId\" : \"erpId\", \"id\" : \"id\", \"nativeCreatedDate\" : \"2000-01-23T04:56:07.000+00:00\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/customer-lookups/{id} : Customer details update
     *
     * @param id Customer ID (required)
     * @param customerPartialRequestDto Updated customer (required)
     * @return Customer details successfully updated (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Customer details update", nickname = "updateCustomer", notes = "", tags={ "customer", })
    @ApiResponses(value = { 

        @ApiResponse(code = 204, message = "Customer details successfully updated"),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/customer-lookups/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateCustomer(@ApiParam(value = "Customer ID", required = true) @PathVariable("id") String id

,

@ApiParam(value = "Updated customer", required = true )   @Valid @RequestBody CustomerPartialRequestDto customerPartialRequestDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
