/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zoetis.zdms.api.rest;

import com.zoetis.zdms.api.dto.DictionariesResponseDto;
import com.zoetis.zdms.api.dto.ErrorDto;
import com.zoetis.zdms.api.dto.LanguageDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T09:15:08.643330200-04:00[America/New_York]")
@Validated
@Api(value = "Dictionary", description = "the Dictionary API")
public interface DictionaryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/dictionaries : Dictionary list
     *
     * @param language  (required)
     * @return Dictionary list (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Dictionary list", nickname = "getDictionaries", notes = "", response = DictionariesResponseDto.class, tags={ "dictionary", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Dictionary list", response = DictionariesResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/dictionaries",
        produces = { "application/json" }
    )
    default ResponseEntity<DictionariesResponseDto> getDictionaries(@NotNull @ApiParam(value = "", required = true, allowableValues = "DE") @Valid @RequestParam(value = "language", required = true) LanguageDto language

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"localizedProductAvailabilities\" : [ { \"localizedAvailability\" : \"localizedAvailability\" }, { \"localizedAvailability\" : \"localizedAvailability\" } ], \"localizedErrorCodes\" : [ { \"localizedErrorCode\" : \"localizedErrorCode\" }, { \"localizedErrorCode\" : \"localizedErrorCode\" } ], \"localizedBooleanValues\" : [ { \"localizedValue\" : \"localizedValue\" }, { \"localizedValue\" : \"localizedValue\" } ], \"localizedCustomerTypes\" : [ { \"localizedType\" : \"localizedType\" }, { \"localizedType\" : \"localizedType\" } ], \"localizedRejectionReasons\" : [ { \"localizedRejectionReason\" : \"localizedRejectionReason\" }, { \"localizedRejectionReason\" : \"localizedRejectionReason\" } ], \"localizedCustomerNativeStatuses\" : [ { \"localizedNativeStatus\" : \"localizedNativeStatus\" }, { \"localizedNativeStatus\" : \"localizedNativeStatus\" } ], \"localizedCustomerStates\" : [ { \"localizedState\" : \"localizedState\" }, { \"localizedState\" : \"localizedState\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
