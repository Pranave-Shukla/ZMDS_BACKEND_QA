/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zoetis.zdms.api.rest;

import com.zoetis.zdms.api.dto.ErrorDto;
import com.zoetis.zdms.api.dto.ProductDetailsResponseDto;
import com.zoetis.zdms.api.dto.ProductPartialRequestDto;
import com.zoetis.zdms.api.dto.ProductsRequestDto;
import com.zoetis.zdms.api.dto.ProductsResponseDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T09:15:08.643330200-04:00[America/New_York]")
@Validated
@Api(value = "Product", description = "the Product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/products/{id} : Product details
     *
     * @param id product ID (required)
     * @param statusId product status ID (required)
     * @return Product details (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Product details", nickname = "getProductDetails", notes = "", response = ProductDetailsResponseDto.class, tags={ "product", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Product details", response = ProductDetailsResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDetailsResponseDto> getProductDetails(@ApiParam(value = "product ID", required = true) @PathVariable("id") String id

,@NotNull @ApiParam(value = "product status ID", required = true) @Valid @RequestParam(value = "statusId", required = true) String statusId

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"product\" : { \"imageFilename\" : \"imageFilename\", \"minimumOrderQuantity\" : 6, \"sourceSystem\" : { \"name\" : \"name\" }, \"associatedProducts\" : \"associatedProducts\", \"description\" : \"description\", \"statusId\" : \"statusId\", \"maximumOrderQuantity\" : 1, \"price\" : 0.8008281904610115, \"name\" : \"name\", \"imageFilepath\" : \"imageFilepath\", \"id\" : \"id\", \"imageUploadDate\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/products : Products list
     *
     * @param productsRequestDto Get products request parameters (required)
     * @return A paged list of products (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Products list", nickname = "getProducts", notes = "", response = ProductsResponseDto.class, tags={ "product", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "A paged list of products", response = ProductsResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductsResponseDto> getProducts(

@ApiParam(value = "Get products request parameters", required = true )   @Valid @RequestBody ProductsRequestDto productsRequestDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pageInfo\" : { \"pageNumber\" : 0, \"totalPages\" : 1, \"totalElements\" : 6 }, \"products\" : [ { \"statusId\" : \"statusId\", \"maximumOrderQuantity\" : 6, \"minimumOrderQuantity\" : 0, \"sourceSystem\" : { \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"id\" }, { \"statusId\" : \"statusId\", \"maximumOrderQuantity\" : 6, \"minimumOrderQuantity\" : 0, \"sourceSystem\" : { \"name\" : \"name\" }, \"description\" : \"description\", \"id\" : \"id\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/products/{id} : Product details update
     *
     * @param id Customer ID (required)
     * @param statusId Product status context (required)
     * @param productPartialRequestDto Updated product (required)
     * @param applyForAllSystems Tells if apply changes to all systems in product context (optional, default to false)
     * @return Product details successfully updated (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Product details update", nickname = "updateProduct", notes = "", tags={ "product", })
    @ApiResponses(value = { 

        @ApiResponse(code = 204, message = "Product details successfully updated"),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProduct(@ApiParam(value = "Customer ID", required = true) @PathVariable("id") String id

,@NotNull @ApiParam(value = "Product status context", required = true) @Valid @RequestParam(value = "statusId", required = true) String statusId

,

@ApiParam(value = "Updated product", required = true )   @Valid @RequestBody ProductPartialRequestDto productPartialRequestDto,@ApiParam(value = "Tells if apply changes to all systems in product context", defaultValue = "false") @Valid @RequestParam(value = "applyForAllSystems", required = false, defaultValue = "false") Boolean applyForAllSystems

) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
