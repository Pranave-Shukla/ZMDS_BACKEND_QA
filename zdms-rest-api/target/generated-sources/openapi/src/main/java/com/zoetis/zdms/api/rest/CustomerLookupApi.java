/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zoetis.zdms.api.rest;

import com.zoetis.zdms.api.dto.CustomerLookupResponseDto;
import com.zoetis.zdms.api.dto.ErrorDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-08-22T09:15:08.643330200-04:00[America/New_York]")
@Validated
@Api(value = "CustomerLookup", description = "the CustomerLookup API")
public interface CustomerLookupApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/customer-lookups/{id} : Customer lookup
     *
     * @param id Customer ID (required)
     * @return Customer lookup (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */

    @ApiOperation(value = "Customer lookup", nickname = "getCustomerLookup", notes = "", response = CustomerLookupResponseDto.class, tags={ "customerLookup", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Customer lookup", response = CustomerLookupResponseDto.class),

        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorDto.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ErrorDto.class),

        @ApiResponse(code = 404, message = "Not Found", response = ErrorDto.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorDto.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customer-lookups/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CustomerLookupResponseDto> getCustomerLookup(@ApiParam(value = "Customer ID", required = true) @PathVariable("id") String id

) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerLookup\" : { \"name4\" : \"name4\", \"name3\" : \"name3\", \"streetAddress\" : \"streetAddress\", \"city\" : \"city\", \"countryCode\" : \"countryCode\", \"postalCode\" : \"postalCode\", \"erpId\" : \"erpId\", \"name2\" : \"name2\", \"title\" : \"title\", \"name1\" : \"name1\", \"contactDetails\" : { \"phoneNumber\" : \"phoneNumber\", \"searchTerms\" : \"searchTerms\", \"email\" : \"email\" } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
